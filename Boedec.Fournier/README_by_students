HOW TO LAUNCH THE PROJECT :
  - Run the project.
  - Give a port number (>= 2005) to the opened console.

HOW TO RUN TEST (3 peers) :
  - Run the project 3 times (i.e. in 3 different consoles).
  - In each console type the number of ports in this order : 2005, 2006, 2007.
  - As soon as a peer is connected with other peer(s) it sends 3 numbers ([8,9,10] for 2005, [16,17,18] for 2006 and [24,25,26] for 2007) in an forever loop.
  - Each delivered messages are displayed in the console.

OVERVIEW OF THE MAIN JAVA CLASSES :

  - Main :
    - Waits for a port number
    - Creates a NioEngine object
    - Launches the "listen" method of the NioEngine object
    - Launches the "connect" method of the NioEnfine object on the other connected peers
    - Launches the mainloop of the NioEngine object


  - NioChannel
    - This class wraps a channelSocket created for a connection with someone else
    - sending() : says it is ready to send to its linked SelectionKey
    - send(message) : sends the message to the remote peer (then send also a ACK when the sent message is a DATA message and not an ACK message)
    - read() : reads a message sent by the remote peer and then sends an ACK message


  - Peer
    - This is the element that gathers the received messages (which wait for their delivrance), the messages to send and a list of the Channel that represents the connexion with other peers.
    - It implements the different callbacks (DeliverCallback, ConnectCallback, AcceptCallback)
    - It owns a timestamp that is sent with their messages
    - This is the element that is called by the Engine when events happens (sending, receive a message, receive a connection, accept a connection)


  - NioEngine :
    - This is the element that monitors the keys of the selector. It calls the associated Peer for it to decide what to do next.


  - Message :
    - Two types of message : ACK or data.
    - We will create more types of message when we will implement a more 'in-depth' dynamic group system.
      -> 'hello' type message will carry a peer request to join a group.
      -> another type will carry the response which will contain the addresses of all group members
    - When a peer receives ACK's for a message, it increments a counter that is located inside its local copy of the message.
    - To prevent conflicts with equal timestamps, the message records the listening port of the message author.


  - BroadcastThread :
    - Every peer starts this thread once they are connected to the group
    - It sends data to every other peers in the group. The data is peer-specific, thus it is easily recognizable during tests.
    - For now we slowed down the frequency at which data is sent, so that we can verify the correct deliver order more easily.
